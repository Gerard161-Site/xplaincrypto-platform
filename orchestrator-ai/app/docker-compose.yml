version: '3.8'

services:
  # Frontend - NextJS App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: orchestrator-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - API_BASE_URL=http://backend:8001
      - DATABASE_URL=${DATABASE_URL:-postgresql://orchestrator:orchestrator_password@postgres:5432/orchestrator_db}
    depends_on:
      - postgres
      - redis-cache
    volumes:
      - ./.env:/app/.env:ro
    networks:
      - orchestrator-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: orchestrator-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
    networks:
      - orchestrator-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: orchestrator-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-orchestrator_db}
      - POSTGRES_USER=${POSTGRES_USER:-orchestrator}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-orchestrator_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - orchestrator-network
    restart: unless-stopped

  # Redis for caching
  redis-cache:
    image: redis:7-alpine
    container_name: orchestrator-redis
    command: redis-server --requirepass ${REDIS_CACHE_PASSWORD:-redis_cache_123}
    ports:
      - "${REDIS_CACHE_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    networks:
      - orchestrator-network
    restart: unless-stopped

  # Backend API (Python)
  backend:
    image: orchestrator-backend:latest
    container_name: orchestrator-backend
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://orchestrator:${POSTGRES_PASSWORD:-orchestrator_password}@postgres:5432/${POSTGRES_DB:-orchestrator_db}
      - REDIS_URL=redis://:${REDIS_CACHE_PASSWORD:-redis_cache_123}@redis-cache:6379
    depends_on:
      - postgres
      - redis-cache
    networks:
      - orchestrator-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  orchestrator-network:
    driver: bridge