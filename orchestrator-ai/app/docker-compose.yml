version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - FRONTEND_PORT=3000
      - API_BASE_URL=${API_BASE_URL:-http://localhost:8001}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/orchestrator}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./prisma:/app/prisma
    restart: unless-stopped
    networks:
      - orchestrator-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-orchestrator}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - orchestrator-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - orchestrator-network

  # Optional: Redis cache for frontend (if cache profile is enabled)
  redis-cache:
    image: redis:7-alpine
    ports:
      - "${REDIS_CACHE_PORT:-6380}:6379"
    command: redis-server --requirepass ${REDIS_CACHE_PASSWORD:-redis_cache_123}
    volumes:
      - redis_cache_data:/data
    restart: unless-stopped
    networks:
      - orchestrator-network
    profiles:
      - cache

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
    restart: unless-stopped
    networks:
      - orchestrator-network
    profiles:
      - nginx

volumes:
  postgres_data:
  redis_data:
  redis_cache_data:

networks:
  orchestrator-network:
    driver: bridge